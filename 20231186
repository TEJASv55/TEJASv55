import .util.*;
   import .util.Scanner;
   public class Main{
      public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n1, n2, i, j, flag;
        System.out.print("Enter the lower no. of interval : ");
        n1 = in.nextInt();
        System.out.print("Enter the higher no. of interval : ");
        n2 = in.nextInt();
        System.out.println("Prime no. between "+n1+" and "+n2+" are : ");
        for(i=n1;i<=n2;i++){
            if(i==1 || i==0)
                continue;
            flag = 1;
            for(j=2;j<=i/2;j++){
                if(i%j == 0){
                    flag = 0;
                    break;
                }
            }
            if(flag == 1)
                System.out.print(i+" ");
        }
      }
   }
   
b) Find all the roots of a quadratic equation.
   // Find all the roots of a quadratic equation
   import java.util.*;
   import java.util.Scanner;
   public class Main{
      public static void main(String args[]){
          Scanner in = new Scanner(System.in);
          double a, b, c, det, r1, r2;
          System.out.print("Enter non-zero co-effecient value : ");
          a = in.nextDouble();
          b = in.nextDouble();
          c = in.nextDouble();
          det = b*b - 4*a*c;
          if(det > 0){
              System.out.println("Roots are real and distinct ");
              r1 = (-b + Math.sqrt(det))/(2*a);
              r2 = (-b - Math.sqrt(det))/(2*a);
              System.out.println("Root-1 : "+r1+" and Root-2 : "+r2);
          }
          else if(det == 0){
              System.out.println("Roots are real and equal ");
              r1 = r2 = (-b)/(2*a);
              System.out.println("Root-1 = Root-2 = "+r1);
          }
          else{
              System.out.println("Roots are complex and imaginary");
              double real = (-b)/(2*a);
              double imaginary = Math.sqrt(-det)/(2*a);
              System.out.println("Root-1 = "+real+" + "+imaginary+"i");
              System.out.println("Root-2 = "+real+" - "+imaginary+"i");
          }
      }
   }
c) Print ‘N’ Fibonacci numbers.
   // Print ‘N’ Fibonacci numbers.
   import java.util.*;
   import java.util.Scanner;
   public class Main{
       public static void main(String args[]){
           Scanner in = new Scanner(System.in);
           int N, n1=0, n2=1, n3, i;
           System.out.println("Enter the value of N : ");
           N = in.nextInt();
           System.out.print("Fibonacci sequence upto "+N+" terms : "+n1+" "+n2);
           for(i=2;i<N;i++){
               n3 = n1+n2;
               System.out.print(" "+n3);
               n1 = n2;
               n2 = n3;
           }
       }
   }
d) Print pyramid shape using * symbols.
   // Print pyramid shape using * symbols.
   import java.util.*;
   import java.util.Scanner;
   public class Main{
       public static void print(int n){
           for(int i=0;i<n;i++){
               for(int j=n-i;j>1;j--)
                   System.out.print(" ");
               for(int j=0;j<=i;j++)
                   System.out.print("* ");
               System.out.println();
           }
       }
     
       public static void main(String args[]){
           Scanner in = new Scanner(System.in);
           int a;
           System.out.print("Enter no. of * required at base : ");
           a = in.nextInt();
           print(a);
       }
   }

2 . Define a class to represent a bank ACCOUNT and include the following members:
    I. Data Members(States):
      a) Name of Depositor
      b) Account number
      c) Type of Account
      d) Balance amount in the account
   II. Member Methods(Behaviors):
      a) To assign initial values
      b) To deposit an amount
      c) To withdraw an amount after checking for the balance
      d) To display name & balance
  III. Define EXECUTEACCOUNT class that defines main method to test above class.
   IV. In the above class, maintain the total number of account holders present in the bank and also define a method to define it. Change the main method appropriately.
    V. In main method of EXECUTEACCOUNT class, define an array to handle five accounts.
   VI. In ACCOUNT class constructor, demonstrate the use of “this” keyword

// Bank function
import java.util.*;
import java.util.Scanner;
class Bankdetails{
    String name;
    String acc_type;
    String acc_no;
    int balance;
    Scanner in = new Scanner(System.in);
    void openaccount(){
        System.out.print("Enter name : ");
        name = in.next();
        System.out.print("Enter account no. : ");
        acc_no = in.next();
        System.out.print("Enter account type : ");
        acc_type = in.next();
        System.out.print("Enter balance : ");
        balance = in.nextInt();
    }
    void display(){
        System.out.println("Name : "+name);
        System.out.println("Account type : "+acc_type);
        System.out.println("Account no. : "+acc_no);
        System.out.println("Balance : "+balance);
    }
    void deposit(){
        System.out.print("Enter amount to deposit : ");
        int amt = in.nextInt();
        balance += amt;
    }
    void withdraw(){
        System.out.print("Enter ammount to withdraw : ");
        int amt = in.nextInt();
        if(balance >= amt){
            balance -= amt;
            System.out.println("Balance after withdrawing "+amt+" = "+balance);
        }
        else{
            System.out.println("Transaction failed!!! Balance is less than amount requested");
        }
    }
    public boolean search(String an){
        if(acc_no.equals(an)){
            display();
            return true;
        }
        return false;
    }
}

public class Main{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        System.out.print("Enter no. of customers : ");
        int n = in.nextInt();
        Bankdetails[] c = new Bankdetails[n];
        for(int i=0; i<c.length; i++){
            c[i] = new Bankdetails();
            c[i].openaccount();
        }
        int ch;
        do{
            System.out.println("Enter your choice : ");
            System.out.print("1. Display \n2. Search account by account no.\n3. Deposit\n4. Withdraw\n0. Exit\n");
            ch = in.nextInt();
            switch(ch){
                case 1 : for(int i=0;i<c.length;i++){
                            c[i].display();
                         }
                         break;
                case 2 : System.out.print("Enter account no. to search : ");
                         String an = in.next();
                         boolean found = false;
                         for(int i=0;i<c.length;i++){
                             found = c[i].search(an);
                             if(found){
                                 break;
                             }
                         }
                         if(!found)
                            System.out.println("Search failed");
                         break;
                case 3 : System.out.print("Enter account no. to deposit : ");
                         an = in.next();
                         found  = false;
                         for(int i=0;i<c.length;i++){
                             found = c[i].search(an);
                             if(found){
                                 c[i].deposit();
                                 break;
                             }
                         }
                         if(!found)
                            System.out.println("Search failed");
                         break;
                case 4 : System.out.print("Enter accoutn no. to withdraw :  ");
                         an = in.next();
                         found = false;
                         for(int i=0;i<c.length;i++){
                             found = c[i].search(an);
                             if(found){
                                 c[i].withdraw();
                             }
                         }
                         if(!found)
                            System.out.println("Search failed");
                         break;
                case 0 : System.out.println("--------Thankyou-----");
                         break;
                default : System.out.println("Invalid choice");
                          break;
            }
        }while(ch != 0);
    }
}
3
The daily maximum temperatures recorded for 5 cities during the first 6 days of January month have to be tabulated. Develop an application to read the
data and find the city and day corresponding to highest temperature and lowest temperature.
// Java program to calculate max temp and min temp in 6days of Jan
import java.util.*;
import java.util.Scanner;
public class Main{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        City[] city = new City[6];
        for(int i=0;i<6;i++)
            city[i] = new City();
        for(int i=0;i<6;i++){
            System.out.print("Enter details of city-"+(i+1)+" : ");
            city[i].read();
            city[i].cal();
        }
        int ch=0;
        while(ch != 2){
            System.out.print("Press 1 to display\nPress 2 to exit");
            ch = in.nextInt();
            if(ch ==1){
                System.out.print("Enter the city no. : ");
                int ctn = in.nextInt();
                if(ctn > 5 || ctn < 1)
                    System.out.print("Enter valid no. ");
                else
                    city[ctn-1].display();
            }
            else if(ch ==2)
                break;
            else
                System.out.print("Enter correct option");
        }
        in.close();
    }
}
class City{
    Scanner in = new Scanner(System.in);
    int[] t = new int[6];
    int high, low, hd, ld;
    String name;
    public void read()
    {
        System.out.print("Enter the name of city : ");
        name = in.next();
        for(int i=0;i<6;i++){
            System.out.print("Enter the temperature on Jan "+(i+1)+" : ");
            t[i] = in.nextInt();
        }
    }
    public void cal()
    {
        high = t[1];
        low = t[1];
        for(int i=0; i<6; i++){
            if(t[i] > high){
                high = t[i];
                hd = i+1;
            }
            if(t[i] < low){
                low = t[i];
                ld = i+1;
            }
        }
    }
    public void display(){
        System.out.println("City Name : "+name);
        System.out.println("Highest temperataure is "+high+" on Jan "+hd);
        System.out.println("Lowest temperataure is "+low+" on Jan "+ld);
    }
}
4
An election is contested by 5 candidates. The candidates are numbered 1 to 5 and the voting is done by marking the candidate number on the ballot paper. Develop an application to read the ballots and count the votes cast for each candidate using an array variable count. In case, a number read is outside the range 1 to 5, the ballot should be considered as a 'spoilt ballot' and the program should also count the number of spoilt ballots

// Program to read ballot no. and to count no. of votes and spoilt votes
import java.util.*;
import java.util.Scanner;
public class Main{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int[] c = {0,0,0,0,0,0};
        int spoilt=0;
        int ch;
        System.out.println("1. Candidate-1\n2. Candidate-2\n3. Candidate-3\n4. Candidate-4\n5. Candidate-5 \n0. To get result");
        do{
            System.out.print("Enter no. to vote candidate : ");
            ch = in.nextInt();
            switch(ch){
                case 1 : c[0]++; break;
                case 2 : c[1]++; break;
                case 3 : c[2]++; break;
                case 4 : c[3]++; break;
                case 5 : c[4]++; break;
                default : spoilt++; break;
            }
        }while(ch != 0);
        System.out.println("----RESULT-------");
        System.out.print("Candidate-1 : "+c[0]+" votes\nCandidate-2 : "+c[1]+" votes\nCandidate-3 : "+c[2]+" votes\nCandidate-4 : "+c[3]+" votes\nCandidate-5 : "+c[4]+" votes\nSpoilt : "+(spoilt-1)+" votes");
    }
}


5 . Given are two one dimensional array A and B which are sorted in ascending order. Develop an application to merge them into a single sorted array C that
contains every item form A and B, in ascending order.

// Java program to merge two sorted arrays
import java.util.*;

class Main
{
	public static void mergearrays(int[] A, int[] B, int n1,
								int n2, int[] C)
	{
		int i = 0, j = 0, k = 0;
		while (i<n1 && j <n2)
		{
			if (A[i] < B[j])
				C[k++] = A[i++];
			else
				C[k++] = B[j++];
		}
		while (i < n1)
			C[k++] = A[i++];
		while (j < n2)
			C[k++] = B[j++];
	}
	
	public static void main (String args[])
	{
	    int i;
	    Scanner in = new Scanner(System.in);
		int[] A = new int[10];
		System.out.println("Enter no. of elements of array - A : ");
		int n1 = in.nextInt();
		System.out.println("Enter "+n1+" elements into array - A : ");
		for(i=0;i<n1;i++){
		    A[i] = in.nextInt();
		}
		int[] B = new int[10];
		System.out.println("Enter no. of elements of array - B : ");
		int n2 = in.nextInt();
		System.out.println("Enter "+n2+" elements into array - B : ");
		for(i=0;i<n2;i++){
		    B[i] = in.nextInt();
		}
	
		int[] C = new int[n1+n2];
		mergearrays(A, B, n1, n2, C);
	
		System.out.println("Array after merging");
		for (i=0; i < n1+n2; i++)
			System.out.print(C[i] + " ");
	}
}


6.

import java.util.*;
import java.util.Scanner;
class CUBE{
    Scanner in = new Scanner(System.in);
    int vol, out_ar, j=1, k=1;
    int[] a = new int[20];
    void read(int n){
        for(int i=0; i<n; i++){
            System.out.print("Enter the length of side of cube-"+j+" : ");
            a[i] = in.nextInt();
            j++;
        }
    }
    void calculate(int n){
        for(int i=0; i<n;i++){
            vol = a[i]*a[i]*a[i];
            out_ar = 6*a[i]*a[i];
            System.out.println("Vole=ume of cube-"+k+" = "+vol);
            System.out.println("Outer area of cube-"+k+" = "+out_ar);
            k++;
        }
    }
}
public class Main{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n;
        System.out.print("Enter no. of cubes : ");
        n = in.nextInt();
        CUBE cube = new CUBE();
        cube.read(n);
        cube.calculate(n);
    }
}
