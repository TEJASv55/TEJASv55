Develop a menu driven program to implement the following operations on array storage representation with static and dynamic memory allocation. 
i)Insert by position ii) Delete by position iii)Insert by key iv) Delete by key v) Insert by order vi) Search by key vii) Search by position viii) 
Reverse the contents.

#include <stdio.h>
#include <stdlib.h>

#define MAX 100   // For static allocation

// Function Prototypes
void display(int arr[], int n);
void insertByPos(int arr[], int *n, int pos, int val);
void deleteByPos(int arr[], int *n, int pos);
void insertByKey(int arr[], int *n, int key, int val);
void deleteByKey(int arr[], int *n, int key);
void insertByOrder(int arr[], int *n, int val);
int searchByKey(int arr[], int n, int key);
int searchByPos(int arr[], int n, int pos);
void reverse(int arr[], int n);

int main() {
    int choice, arr[MAX], n = 0, pos, key, val;
    int *dynArr = NULL, dynSize = 0, dynCap = 2;

    dynArr = (int*)malloc(dynCap * sizeof(int));

    while (1) {
        printf("\n==== Array Operations Menu ====\n");
        printf("1. Insert by Position\n");
        printf("2. Delete by Position\n");
        printf("3. Insert by Key\n");
        printf("4. Delete by Key\n");
        printf("5. Insert by Order\n");
        printf("6. Search by Key\n");
        printf("7. Search by Position\n");
        printf("8. Reverse the Array\n");
        printf("9. Display\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter position and value: ");
                scanf("%d %d", &pos, &val);
                insertByPos(arr, &n, pos, val);
                break;
            case 2:
                printf("Enter position to delete: ");
                scanf("%d", &pos);
                deleteByPos(arr, &n, pos);
                break;
            case 3:
                printf("Enter key and value to insert after key: ");
                scanf("%d %d", &key, &val);
                insertByKey(arr, &n, key, val);
                break;
            case 4:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                deleteByKey(arr, &n, key);
                break;
            case 5:
                printf("Enter value to insert in order: ");
                scanf("%d", &val);
                insertByOrder(arr, &n, val);
                break;
            case 6:
                printf("Enter key to search: ");
                scanf("%d", &key);
                pos = searchByKey(arr, n, key);
                if (pos != -1) printf("Key found at position %d\n", pos);
                else printf("Key not found.\n");
                break;
            case 7:
                printf("Enter position to search: ");
                scanf("%d", &pos);
                val = searchByPos(arr, n, pos);
                if (val != -1) printf("Value at position %d is %d\n", pos, val);
                else printf("Invalid position.\n");
                break;
            case 8:
                reverse(arr, n);
                printf("Array reversed.\n");
                break;
            case 9:
                display(arr, n);
                break;
            case 10:
                free(dynArr);
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
    return 0;
}

// Function Definitions

void display(int arr[], int n) {
    if (n == 0) {
        printf("Array is empty.\n");
        return;
    }
    printf("Array: ");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");
}

void insertByPos(int arr[], int *n, int pos, int val) {
    if (*n >= MAX || pos < 1 || pos > *n + 1) {
        printf("Invalid position or array full!\n");
        return;
    }
    for (int i = *n; i >= pos; i--) arr[i] = arr[i-1];
    arr[pos-1] = val;
    (*n)++;
}

void deleteByPos(int arr[], int *n, int pos) {
    if (pos < 1 || pos > *n) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = pos-1; i < *n-1; i++) arr[i] = arr[i+1];
    (*n)--;
}

void insertByKey(int arr[], int *n, int key, int val) {
    int i, pos = -1;
    for (i = 0; i < *n; i++) {
        if (arr[i] == key) {
            pos = i+1;
            break;
        }
    }
    if (pos == -1) {
        printf("Key not found.\n");
        return;
    }
    insertByPos(arr, n, pos+1, val);
}

void deleteByKey(int arr[], int *n, int key) {
    int i, pos = -1;
    for (i = 0; i < *n; i++) {
        if (arr[i] == key) {
            pos = i+1;
            break;
        }
    }
    if (pos == -1) {
        printf("Key not found.\n");
        return;
    }
    deleteByPos(arr, n, pos);
}

void insertByOrder(int arr[], int *n, int val) {
    if (*n >= MAX) {
        printf("Array full!\n");
        return;
    }
    int i = *n-1;
    while (i >= 0 && arr[i] > val) {
        arr[i+1] = arr[i];
        i--;
    }
    arr[i+1] = val;
    (*n)++;
}

int searchByKey(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) if (arr[i] == key) return i+1;
    return -1;
}

int searchByPos(int arr[], int n, int pos) {
    if (pos < 1 || pos > n) return -1;
    return arr[pos-1];
}

void reverse(int arr[], int n) {
    int i, temp;
    for (i = 0; i < n/2; i++) {
        temp = arr[i];
        arr[i] = arr[n-1-i];
        arr[n-1-i] = temp;
    }
}
